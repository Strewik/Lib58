class BookIssueView(generics.CreateAPIView):
    queryset = IssueReturn.objects.all()
    serializer_class = BookIssueSerializer

    def create(self, request, *args, **kwargs):
        user = request.user
        book_id = request.data.get("book")

        if user.status == "suspended":
            return Response({"error": "Your account is suspended and you cannot borrow books."},
                            status=status.HTTP_403_FORBIDDEN)

        active_issues = IssueReturn.objects.filter(user=user, status="issued").count()
        if active_issues >= 3:
            return Response({"error": "You have reached the maximum limit of 3 borrowed books."},
                            status=status.HTTP_400_BAD_REQUEST)

        try:
            book = Book.objects.get(id=book_id)
            if book.availability <= 0:
                return Response({"error": "No copies available for issuing."},
                                status=status.HTTP_400_BAD_REQUEST)

            serializer = self.get_serializer(data=request.data)
            serializer.is_valid(raise_exception=True)
            self.perform_create(serializer)

            return Response(serializer.data, status=status.HTTP_201_CREATED)

        except Book.DoesNotExist:
            return Response({"error": "Book not found"}, status=status.HTTP_404_NOT_FOUND)

